#!/usr/bin/env python
# vim: set softtabstop=2 ts=2 sw=2 expandtab: 
import csv,sys,os
import math,re,argparse

if __name__ == '__main__':

  """ Check for arguments """
  optParse = argparse.ArgumentParser(description='Fix spec-machine output, create useable csv file',prog='fix-machine-output',epilog='(c) 2016 - Karl Vollmer <vollmer@oregonstate.edu>')
  optParse.add_argument('-f',nargs=1,help='Source file to parse',dest='targetFile')
  optParse.add_argument('-t',nargs=1,choices=['ba','mz'],help='Source File format, if not auto-detected',dest='targetType')
  if len(sys.argv) == 1:
    optParse.print_help()
    sys.exit(1)

  optArgs = optParse.parse_args()
  """ Attempt to detect which file type this is, if it's not defined """
  try:
    if optArgs.targetType[0] == 'ba':
      interval = 4
      rowStart = 21
    elif optArgs.targetType[0] == 'mz':
      interval = 7
      rowStart = 21
  except:
    """ Attempt ot autodetect """
    try:
      if 'Ce,' in open(optArgs.targetFile[0]).read():
        interval = 4
        rowStart = 21
        print 'BA Filetype detected, if this is incorrect please specify using -t mz'
      else:
        interval = 7
        rowStart = 21
        print 'MZ Filetype detected, if this is incorrect please specify using -t ba'
    except:
      print 'Unable to determine type of %s please specify using -t {ba,mz}' % (optArgs.targetFile[0])
      sys.exit(1)
  

  """ Open the csv file for reading """
  try: 
    csvfile = open(optArgs.targetFile[0],'rb')
  except IOError:
    print 'Unable to open %s file unreadable or not found' % (optArgs.targetFile[0])
    sys.exit(1)

  try:
    csvreader = csv.reader(csvfile,delimiter=',')
  except:
    print '%s is an invalid or unreadable csv file' % (optArgs.targetFile[0])
    sys.exit(1)

  print 'Reading %s' % (optArgs.targetFile)

  paramFilename = optArgs.targetFile[0][:-4] + '-params.csv'
  dataFilename  = optArgs.targetFile[0][:-4] + '-data.csv'

  try:
    paramFile = open(paramFilename,'wb')
  except IOError:
    print 'Unable to open %s file for writing' % (paramFilename) 

  try:
    dataFile = open(dataFilename,'wb')
  except IOError:
    print 'Unable to open %s file for writing' % (dataFilename)

  if interval == 4:
    dataFields = ['Spec_id','Ba_ppm','La_ppm','Ce_ppm','Ba_Uncertainty','La_Uncertainty','Ce_Uncertainty','Ba_Peak','La_Peak','Ce_Peak','Ba_Background','La_Background','Ce_Background','Notes']
  else:
    dataFields = ['Spec_id','Rb_ppm','Sr_ppm','Y_ppm','Zr_ppm','Nb_ppm','Rb_Uncertainty','Sr_Uncertainty','Y_Uncertainty','Zr_Uncertainty','Nb_Uncertainty','Rb_Peak','Sr_Peak','Y_Peak','Zr_Peak','Nb_Peak','Rb_Background','Sr_Background','Y_Background','Zr_Background','Nb_Background','Notes']

  paramCsv = csv.writer(paramFile,delimiter=',')
  dataCsv = csv.DictWriter(dataFile, fieldnames=dataFields)
  dataCsv.writeheader()
  rowCount=0
  rowDict={'Notes':''}
  for row in csvreader:

    if (rowCount < 18):
      paramCsv.writerow(row)
    elif (rowCount >= rowStart):
      """ for invalid csv files, if row length is 1 element """
      if len(row) == 1:
        rowDict['Spec_id'] = row[0]
      elif len(row) == 0:
        """ invalid csv file, empty row preceeds header """
        dataCsv.writerow(rowDict)
        rowDict.clear()
        rowDict['Notes'] = ''
      elif len(row[0]) > 0 and len(row[1]) == 0:
        """ valid csv files If row[0] has stuff, but [1] is empty """
        rowDict['Spec_id'] = row[0]
      elif len(row[0]) == 0 and len(row[1]) == 0:
        """ valid csv file, first two elements empty preceeds next header """
        dataCsv.writerow(rowDict)
        rowDict.clear()
        rowDict['Notes'] = ''
      elif len(row[1]) < 4:
        """ all should have [1] if none of the above are true """
        if '[' in row[2]:
          rowDict['Notes'] = rowDict['Notes'] + row[1] + ' PPM Is below threshold, %s ' % (row[2])
          rowDict[row[1]+'_ppm'] = '0'
        else:
          rowDict[row[1]+'_ppm']          = re.sub("[^0-9\.]",'',row[2])
        rowDict[row[1]+'_Uncertainty']  = row[3]
        rowDict[row[1]+'_Peak']         = row[4]
        rowDict[row[1]+'_Background']   = row[5]
    rowCount = rowCount + 1
  """ Write out the final dataset """
  dataCsv.writerow(rowDict)
print "Proccessing complete output %s and %s :: Proccessed %s lines" % (paramFilename,dataFilename,rowCount)
