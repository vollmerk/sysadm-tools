#!/usr/bin/env ruby

require 'shellwords'

# Read in the arguments passed should be [repo path] [start commit] [end commit] [ref]
info = ARGV

# Pull out the environment based on the 6th part of the repo path
environment = info.at(0).split('/').at(6)
repo_path = info.at(0)
repo = info.at(0).split('/').at(7)[0..-5]

# Move to the repo directory
Dir.chdir repo_path

# If this is the 'production' environment, don't touch anything
# Else update the /etc/puppet/environment/#{ENV} folder from git
if environment == "production"
        puts "Production Environment commit ignoring"
elsif File.directory?("/etc/puppet/environments/#{environment}")
        puts "#{environment} environment updated"
        `git --git-dir=#{repo_path} --work-tree=/etc/puppet/environments/#{environment} checkout -f`
end

## Manage the submission to Footprints, we have to use e-mail addresses
## here so this is a little cheesy, might be a better way to do this

## Check to make sure it's not the first commit
first_rev = `git rev-list --max-parents=0 HEAD`
if first_rev == info.at(2) 
	puts "Initial Commit, skipping proccessing"
	exit(0)
end

# Set the FROM: address based on the "environment", if nothing is found use "gitlab" 
# but it won't be able to issue commands then :(
case environment
	when "ZZ"
		email = "ZZ"
	else
		email = "GITLAB <gitlab@localdomain>"
end



# Right now just use the research-computing environment, but we should
# Detect merges and handle them properly so we don't re-submit existing
# information, PROJ=72 is always used (servicedesk)
if environment == "production"
        ## Tease out the Merge commit message and ignore the rest
        ## we'll also want to try to clean up the merge request
	## Use the "See Merge Request ![##] to create link to https://hpc.dal.ca/gitlab/[ENV]/[REPO]/merge_requests/[###]
        log = `git log #{info.at(3)}~1..#{info.at(3)}`.gsub(/commit\s[A-Za-z\d]+/,'') 
        if log.index(/.*#(\d+).*/) != nil
                issue = log.scan(/.*#(\d+).*/).last.first
		commit_url = "GITLAB Merge: https://localdomain/gitlab/#{environment}/#{repo}/commit/#{info.at(2)}"
                subject = "GITLAB Merged to Production ISSUE=#{issue} PROJ=72"
                cmd = "echo #{Shellwords.escape(log.lstrip+"\n"+commit_url)} | mailx -a \"FROM: #{email}\" -s \"#{subject}\" support@localdomain"
                `#{cmd}`
                puts "E-mail ticket update for ISSUE##{issue} with commit log message"
        end
else
        ## Non-Prod so deveoplment commit, check and update FOOTPRINTS as needed
	## Attempt to tease our URL and add it to the message body https://hpc.dal.ca/gitlab/[ENV]/[REPO]/commit/[###]
	

        revisions = `git rev-parse #{info.at(3)} | git rev-list --stdin #{info.at(1)}..#{info.at(2)}`.split("\n")
        for index in 0 ... revisions.size
                rev = revisions[index]
                log = `git log #{rev}~1..#{rev} | sed '1,3d'` 
                if log.index(/.*#(\d+).*\Z/) != nil
			# Attempt to append the URL to the end of the message
			commit_url = "GITLAB Commit: https://localdomain/gitlab/#{environment}/#{repo}/commit/#{rev}"
                        issue = log.scan(/.*#(\d+).*\Z/).last.first
                        subject = "GITLAB Development commit ISSUE=#{issue} PROJ=72"
                        cmd = "echo #{Shellwords.escape(log.lstrip+"\n"+commit_url)} | mailx -a \"FROM: #{email}\" -s \"#{subject}\" support@localdomain"
                        `#{cmd}`
                        puts "E-mail ticket Update for ISSUE##{issue} with commit log message"
                end
        end
end

